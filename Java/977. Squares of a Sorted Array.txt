QUESTION

Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.

---------------------------
solution


class Solution {
    public int[] sortedSquares(int[] nums) {
       
        int[] result = new int[nums.length];
        int start = 0;
        int end = nums.length-1;
        int index =end;
        
        
        while(index>=0)
        {
            if(Math.abs(nums[start])>Math.abs(nums[end]))//kalau paling kiri kuadarat lebih besar dari paling kanan kuadrat
            {
                result[index] = (int)Math.pow(nums[start],2);
                start++;
            }
            else{
                result[index] = (int)Math.pow(nums[end],2);
                end--;
            }
            index--;
        }
        return result;
    }
}